// Connexion MongoDB
// =================

const chalk = require('chalk')
const mongoose = require('mongoose')

// ChaÃ®ne URL de connexion
// -----------------------

const url =
  // PrioritÃ© absolue Ã  la variable dâ€™environnement (dotenv Ã©ventuel en dev,
  // clouds / hÃ©bergeurs)
  process.env.MONGODB_URI ||
  // Sinon, prioritÃ© Ã  la globale explicite (environnement de test dÃ©diÃ© dans
  // JEST)
  global.MONGODB_URI ||
  // En dernier recours, donc sous-entendu en dev sans dotenv, base Mongo
  // locale, non-authentifiÃ©e, sur le port par dÃ©faut.
  'mongodb://localhost:27017/mdcu'

// Connexion automatique
// ---------------------
//
// Le simple fait de requÃ©rir ce module active la connexion, ce qui est
// notamment trÃ¨s pratique pour les tests, chaque modÃ¨le utilisant explicitement
// ce module. Les paramÃ¨tres de *timeout* et dâ€™intervalle de reconnexion sont
// ici spÃ©cifiquement calÃ©s pour le dev et les tests, mais ne posent pas de
// souci en production.
const connection = mongoose.createConnection(url, {
  connectTimeoutMS: 5000,
  reconnectInterval: 100,
  // `useCreateIndex: true` empÃªche le recours Ã  une API MongoDB dÃ©sormais
  // dÃ©prÃ©ciÃ©e.
  useCreateIndex: true,
  // On demande explicitement le nouveau parser dâ€™URL Mongo, qui permet
  // notamment le protocole `mongodb+srv://`, ce qui est bien utile pour nos
  // connexions MongoDB Atlas par exempleâ€¦
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
// Le rÃ©glage `useFindAndModify: false`, non accessible dans
// `createConnection()`, empÃªche Ã©galement le recours Ã  cette API MongoDB
// dÃ©sormais dÃ©prÃ©ciÃ©e.
mongoose.set('useFindAndModify', false)

// Logs de connexion / dâ€™erreur
// ----------------------------

if (process.env.NODE_ENV !== 'test') {
  // Inutile de pourrir lâ€™affichage des tests avec le log de connexion Ã  la
  // baseâ€¦
  connection.on('open', () => {
    console.log(
      chalk`{green âœ…  Connected to mongoDB database ${connection.name}}`
    )
  })
}

// En revanche, loguer une erreur de connexion est utile dans tous les cas !
connection.on('error', () => {
  console.error(
    chalk`{red ðŸ”¥  Could not connect to mongoDB database ${connection.name}}`
  )
})

// Export par dÃ©faut du module : la connexion elle-mÃªme.
module.exports = connection
